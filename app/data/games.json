{
    "coffee-shop-financial-literacy": {
        "id": "coffee-shop-financial-literacy",
        "name": "Coffee Shop Budget Master",
        "description": "Coffee Shop Budget Master is an educational simulation game with functional components including: Core game mechanics (starting with $100 cash, empty inventory, $50 daily goal; four supply types with different costs; four drink types with varying requirements; open/close shop operations with automatic customer generation; multi-day gameplay with increasing difficulty). Real-time tracking systems (budget dashboard showing cash, sales, expenses, profit; inventory management with purchase/consumption tracking; customer queue visualization; progress monitoring with goal achievement bar). Decision-making framework (strategic purchasing based on funds and demand; service decisions requiring inventory availability; timing decisions for operations and day progression). Educational components include: Financial literacy concepts (income vs expenses tracking; real-time profit calculation; cash flow management; resource allocation strategies). Budgeting skills development (progressive goal setting; demand-based planning; consequence learning through immediate feedback; risk assessment of purchasing and serving strategies). Interactive learning features (Budget Detective Moments that reframe mistakes as opportunities; real-time warnings for financial missteps; progress visualization; end-of-day reflection prompts). Practical application (supply chain understanding of inventory impact on revenue; customer service economics; basic business operations concepts; strategic thinking for different profit approaches).",
        "code": "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCI+CiAgICA8dGl0bGU+Q29mZmVlIFNob3AgQnVkZ2V0IE1hc3RlcjwvdGl0bGU+CiAgICA8c3R5bGU+CiAgICAgICAgKiB7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAgICB9CgogICAgICAgIGJvZHkgewogICAgICAgICAgICBmb250LWZhbWlseTogJ0NvbWljIFNhbnMgTVMnLCBjdXJzaXZlOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjOEI0NTEzLCAjRDI2OTFFKTsKICAgICAgICAgICAgbWluLWhlaWdodDogMTAwdmg7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIGNvbG9yOiAjMkYxQjE0OwogICAgICAgIH0KCiAgICAgICAgLmdhbWUtY29udGFpbmVyIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI0OCwgMjIwLCAwLjk1KTsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMjBweDsKICAgICAgICAgICAgcGFkZGluZzogMjBweDsKICAgICAgICAgICAgbWFyZ2luOiAyMHB4OwogICAgICAgICAgICBib3gtc2hhZG93OiAwIDEwcHggMzBweCByZ2JhKDAsMCwwLDAuMyk7CiAgICAgICAgICAgIG1heC13aWR0aDogMTAwMHB4OwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICB9CgogICAgICAgIC5oZWFkZXIgewogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7CiAgICAgICAgfQoKICAgICAgICAuaGVhZGVyIGgxIHsKICAgICAgICAgICAgY29sb3I6ICM4QjQ1MTM7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMi41ZW07CiAgICAgICAgICAgIHRleHQtc2hhZG93OiAycHggMnB4IDRweCByZ2JhKDAsMCwwLDAuMyk7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7CiAgICAgICAgfQoKICAgICAgICAuZGF5LWluZm8gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjRjRBNDYwOwogICAgICAgICAgICBwYWRkaW5nOiAxNXB4OwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4OwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4yZW07CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgIH0KCiAgICAgICAgLmdhbWUtYXJlYSB7CiAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7CiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjsKICAgICAgICAgICAgZ2FwOiAyMHB4OwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4OwogICAgICAgIH0KCiAgICAgICAgLm1lbnUtc2VjdGlvbiwgLmJ1ZGdldC1zZWN0aW9uIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogI0ZGRUZENTsKICAgICAgICAgICAgcGFkZGluZzogMjBweDsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTVweDsKICAgICAgICAgICAgYm9yZGVyOiAzcHggc29saWQgI0QyNjkxRTsKICAgICAgICB9CgogICAgICAgIC5tZW51LXNlY3Rpb24gaDIsIC5idWRnZXQtc2VjdGlvbiBoMiB7CiAgICAgICAgICAgIGNvbG9yOiAjOEI0NTEzOwogICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4OwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgfQoKICAgICAgICAubWVudS1pdGVtIHsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTsKICAgICAgICAgICAgcGFkZGluZzogMTBweDsKICAgICAgICAgICAgbWFyZ2luOiA1cHggMDsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICAgICAgYm9yZGVyOiAycHggc29saWQgI0RFQjg4NzsKICAgICAgICB9CgogICAgICAgIC5pdGVtLWluZm8gewogICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgICAgICBnYXA6IDEwcHg7CiAgICAgICAgfQoKICAgICAgICAuaXRlbS1lbW9qaSB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS41ZW07CiAgICAgICAgfQoKICAgICAgICAuYnV5LWJ0biwgLmFjdGlvbi1idG4gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMjI4QjIyOwogICAgICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgcGFkZGluZzogOHB4IDE1cHg7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7CiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzOwogICAgICAgIH0KCiAgICAgICAgLmJ1eS1idG46aG92ZXIsIC5hY3Rpb24tYnRuOmhvdmVyIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogIzMyQ0QzMjsKICAgICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxLjA1KTsKICAgICAgICB9CgogICAgICAgIC5idXktYnRuOmRpc2FibGVkIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogIzk5OTsKICAgICAgICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDsKICAgICAgICAgICAgdHJhbnNmb3JtOiBub25lOwogICAgICAgIH0KCiAgICAgICAgLmJ1ZGdldC1pdGVtIHsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOwogICAgICAgICAgICBwYWRkaW5nOiA4cHg7CiAgICAgICAgICAgIG1hcmdpbjogNXB4IDA7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7CiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgIzIyOEIyMjsKICAgICAgICB9CgogICAgICAgIC5leHBlbnNlLWl0ZW0gewogICAgICAgICAgICBib3JkZXItbGVmdC1jb2xvcjogI0RDMTQzQzsKICAgICAgICB9CgogICAgICAgIC5tb25leSB7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgICAgICBjb2xvcjogIzIyOEIyMjsKICAgICAgICB9CgogICAgICAgIC5leHBlbnNlLW1vbmV5IHsKICAgICAgICAgICAgY29sb3I6ICNEQzE0M0M7CiAgICAgICAgfQoKICAgICAgICAuYWN0aW9ucyB7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICAgIGdhcDogMTBweDsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICAgIG1hcmdpbjogMjBweCAwOwogICAgICAgICAgICBmbGV4LXdyYXA6IHdyYXA7CiAgICAgICAgfQoKICAgICAgICAuY3VzdG9tZXItcXVldWUgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjRkZFNEI1OwogICAgICAgICAgICBwYWRkaW5nOiAxNXB4OwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNXB4OwogICAgICAgICAgICBtYXJnaW46IDIwcHggMDsKICAgICAgICAgICAgYm9yZGVyOiAzcHggc29saWQgI0RFQjg4NzsKICAgICAgICB9CgogICAgICAgIC5jdXN0b21lciB7CiAgICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlOwogICAgICAgICAgICBwYWRkaW5nOiAxMHB4OwogICAgICAgICAgICBtYXJnaW46IDVweCAwOwogICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgIzQxNjlFMTsKICAgICAgICB9CgogICAgICAgIC5zZXJ2ZS1idG4gewogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjNDE2OUUxOwogICAgICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgICAgICAgIGJvcmRlcjogbm9uZTsKICAgICAgICAgICAgcGFkZGluZzogOHB4IDE1cHg7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDIwcHg7CiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgfQoKICAgICAgICAuc2VydmUtYnRuOmhvdmVyIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogIzY0OTVFRDsKICAgICAgICB9CgogICAgICAgIC5zZXJ2ZS1idG46ZGlzYWJsZWQgewogICAgICAgICAgICBiYWNrZ3JvdW5kOiAjOTk5OwogICAgICAgICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkOwogICAgICAgIH0KCiAgICAgICAgLmdhbWUtc3RhdHVzIHsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBmb250LXNpemU6IDEuMWVtOwogICAgICAgICAgICBtYXJnaW46IDEwcHggMDsKICAgICAgICB9CgogICAgICAgIC5zdWNjZXNzIHsKICAgICAgICAgICAgY29sb3I6ICMyMjhCMjI7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgIH0KCiAgICAgICAgLndhcm5pbmcgewogICAgICAgICAgICBjb2xvcjogI0ZGOEMwMDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgfQoKICAgICAgICAuZXJyb3IgewogICAgICAgICAgICBjb2xvcjogI0RDMTQzQzsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgfQoKICAgICAgICAuY29uZnVzaW9uLWNlbGVicmF0aW9uIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogI0ZGRDcwMDsKICAgICAgICAgICAgYm9yZGVyOiAzcHggZGFzaGVkICNGRjYzNDc7CiAgICAgICAgICAgIHBhZGRpbmc6IDE1cHg7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDE1cHg7CiAgICAgICAgICAgIG1hcmdpbjogMTBweCAwOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgIGFuaW1hdGlvbjogZ2xvdyAycyBpbmZpbml0ZTsKICAgICAgICB9CgogICAgICAgIEBrZXlmcmFtZXMgZ2xvdyB7CiAgICAgICAgICAgIDAlLCAxMDAlIHsgYm94LXNoYWRvdzogMCAwIDEwcHggcmdiYSgyNTUsIDIxNSwgMCwgMC41KTsgfQogICAgICAgICAgICA1MCUgeyBib3gtc2hhZG93OiAwIDAgMjBweCByZ2JhKDI1NSwgMjE1LCAwLCAwLjgpOyB9CiAgICAgICAgfQoKICAgICAgICAucHJvZ3Jlc3MtYmFyIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogI0RERDsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTBweDsKICAgICAgICAgICAgaGVpZ2h0OiAyMHB4OwogICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgICAgICBtYXJnaW46IDEwcHggMDsKICAgICAgICB9CgogICAgICAgIC5wcm9ncmVzcy1maWxsIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkwZGVnLCAjMjI4QjIyLCAjMzJDRDMyKTsKICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgICAgICB0cmFuc2l0aW9uOiB3aWR0aCAwLjVzIGVhc2U7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7CiAgICAgICAgfQoKICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHsKICAgICAgICAgICAgLmdhbWUtYXJlYSB7CiAgICAgICAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgLmFjdGlvbnMgewogICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogICAgPGRpdiBjbGFzcz0iZ2FtZS1jb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImhlYWRlciI+CiAgICAgICAgICAgIDxoMT7imJUgQ29mZmVlIFNob3AgQnVkZ2V0IE1hc3RlciDimJU8L2gxPgogICAgICAgICAgICA8cD5MZWFybiBidWRnZXRpbmcgYnkgcnVubmluZyB5b3VyIG93biBjb2ZmZWUgc2hvcCE8L3A+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImRheS1pbmZvIj4KICAgICAgICAgICAgPGRpdj5EYXkgPHNwYW4gaWQ9ImN1cnJlbnQtZGF5Ij4xPC9zcGFuPiB8IEdvYWw6IEVhcm4gJDxzcGFuIGlkPSJkYWlseS1nb2FsIj41MDwvc3Bhbj48L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZS1hcmVhIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVudS1zZWN0aW9uIj4KICAgICAgICAgICAgICAgIDxoMj7wn5uSIFNob3AgZm9yIFN1cHBsaWVzPC9oMj4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InN1cHBseS1tZW51Ij4KICAgICAgICAgICAgICAgICAgICA8IS0tIFN1cHBsaWVzIHdpbGwgYmUgcG9wdWxhdGVkIGhlcmUgLS0+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJidWRnZXQtc2VjdGlvbiI+CiAgICAgICAgICAgICAgICA8aDI+8J+TiiBZb3VyIEJ1ZGdldDwvaDI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidWRnZXQtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4+8J+SsCBDYXNoOjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9uZXkiPiQ8c3BhbiBpZD0iY3VycmVudC1tb25leSI+MTAwPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnVkZ2V0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPvCfk4ggVG9kYXkncyBTYWxlczo8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1vbmV5Ij4kPHNwYW4gaWQ9ImRhaWx5LXNhbGVzIj4wPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnVkZ2V0LWl0ZW0gZXhwZW5zZS1pdGVtIj4KICAgICAgICAgICAgICAgICAgICA8c3Bhbj7wn5OJIFRvZGF5J3MgRXhwZW5zZXM6PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJleHBlbnNlLW1vbmV5Ij4kPHNwYW4gaWQ9ImRhaWx5LWV4cGVuc2VzIj4wPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnVkZ2V0LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuPvCfkqEgRGFpbHkgUHJvZml0Ojwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9uZXkiPiQ8c3BhbiBpZD0iZGFpbHktcHJvZml0Ij4wPC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8aDM+8J+TpiBZb3VyIEludmVudG9yeTo8L2gzPgogICAgICAgICAgICAgICAgPGRpdiBpZD0iaW52ZW50b3J5Ij4KICAgICAgICAgICAgICAgICAgICA8IS0tIEludmVudG9yeSB3aWxsIGJlIHBvcHVsYXRlZCBoZXJlIC0tPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b21lci1xdWV1ZSI+CiAgICAgICAgICAgIDxoMj7wn5GlIEN1c3RvbWVycyBXYWl0aW5nPC9oMj4KICAgICAgICAgICAgPGRpdiBpZD0iY3VzdG9tZXJzIj4KICAgICAgICAgICAgICAgIDxwPk9wZW4geW91ciBzaG9wIHRvIHNlZSBjdXN0b21lcnMhPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9ucyI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImFjdGlvbi1idG4iIG9uY2xpY2s9Im9wZW5TaG9wKCkiIGlkPSJvcGVuLWJ0biI+8J+PqiBPcGVuIFNob3A8L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYWN0aW9uLWJ0biIgb25jbGljaz0iY2xvc2VTaG9wKCkiIGlkPSJjbG9zZS1idG4iIGRpc2FibGVkPvCflJIgQ2xvc2UgU2hvcDwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJhY3Rpb24tYnRuIiBvbmNsaWNrPSJuZXh0RGF5KCkiPvCfk4UgTmV4dCBEYXk8L2J1dHRvbj4KICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYWN0aW9uLWJ0biIgb25jbGljaz0icmVzZXRHYW1lKCkiPvCflIQgTmV3IEdhbWU8L2J1dHRvbj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iZ2FtZS1zdGF0dXMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJwcm9ncmVzcy1iYXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHJvZ3Jlc3MtZmlsbCIgaWQ9ImdvYWwtcHJvZ3Jlc3MiPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBpZD0ic3RhdHVzLW1lc3NhZ2UiPldlbGNvbWUgdG8geW91ciBjb2ZmZWUgc2hvcCEgQnV5IHN1cHBsaWVzIGFuZCBvcGVuIHlvdXIgc2hvcCB0byBzdGFydCBlYXJuaW5nLjwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGlkPSJjb25mdXNpb24tem9uZSI+PC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8c2NyaXB0PgogICAgICAgIGxldCBnYW1lU3RhdGUgPSB7CiAgICAgICAgICAgIG1vbmV5OiAxMDAsCiAgICAgICAgICAgIGRheTogMSwKICAgICAgICAgICAgZGFpbHlHb2FsOiA1MCwKICAgICAgICAgICAgZGFpbHlTYWxlczogMCwKICAgICAgICAgICAgZGFpbHlFeHBlbnNlczogMCwKICAgICAgICAgICAgaXNPcGVuOiBmYWxzZSwKICAgICAgICAgICAgaW52ZW50b3J5OiB7CiAgICAgICAgICAgICAgICBjb2ZmZWU6IDAsCiAgICAgICAgICAgICAgICBtaWxrOiAwLAogICAgICAgICAgICAgICAgc3VnYXI6IDAsCiAgICAgICAgICAgICAgICBjdXBzOiAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGN1c3RvbWVyczogW10sCiAgICAgICAgICAgIGN1c3RvbWVyVGltZXI6IG51bGwsCiAgICAgICAgICAgIGNvbmZ1c2lvbk1vbWVudHM6IDAKICAgICAgICB9OwoKICAgICAgICBjb25zdCBzdXBwbGllcyA9IFsKICAgICAgICAgICAgeyBuYW1lOiAnY29mZmVlJywgZW1vamk6ICfimJUnLCBjb3N0OiAyMCwgYW1vdW50OiAxMCB9LAogICAgICAgICAgICB7IG5hbWU6ICdtaWxrJywgZW1vamk6ICfwn6WbJywgY29zdDogMTUsIGFtb3VudDogOCB9LAogICAgICAgICAgICB7IG5hbWU6ICdzdWdhcicsIGVtb2ppOiAn8J+NrycsIGNvc3Q6IDEwLCBhbW91bnQ6IDEyIH0sCiAgICAgICAgICAgIHsgbmFtZTogJ2N1cHMnLCBlbW9qaTogJ/CfpaQnLCBjb3N0OiA4LCBhbW91bnQ6IDE1IH0KICAgICAgICBdOwoKICAgICAgICBjb25zdCBjdXN0b21lclR5cGVzID0gWwogICAgICAgICAgICB7IG5hbWU6ICdSZWd1bGFyIENvZmZlZScsIHBheTogNSwgbmVlZHM6IHsgY29mZmVlOiAxLCBjdXBzOiAxIH0gfSwKICAgICAgICAgICAgeyBuYW1lOiAnTGF0dGUnLCBwYXk6IDcsIG5lZWRzOiB7IGNvZmZlZTogMSwgbWlsazogMSwgY3VwczogMSB9IH0sCiAgICAgICAgICAgIHsgbmFtZTogJ1N3ZWV0IENvZmZlZScsIHBheTogNiwgbmVlZHM6IHsgY29mZmVlOiAxLCBzdWdhcjogMSwgY3VwczogMSB9IH0sCiAgICAgICAgICAgIHsgbmFtZTogJ0RlbHV4ZSBDb2ZmZWUnLCBwYXk6IDEwLCBuZWVkczogeyBjb2ZmZWU6IDEsIG1pbGs6IDEsIHN1Z2FyOiAxLCBjdXBzOiAxIH0gfQogICAgICAgIF07CgogICAgICAgIGZ1bmN0aW9uIGluaXRHYW1lKCkgewogICAgICAgICAgICB1cGRhdGVEaXNwbGF5KCk7CiAgICAgICAgICAgIHJlbmRlclN1cHBsaWVzKCk7CiAgICAgICAgICAgIHNob3dDb25mdXNpb24oIldlbGNvbWUhIFlvdSBoYXZlICQxMDAgdG8gc3RhcnQgeW91ciBjb2ZmZWUgc2hvcC4gV2hhdCBzaG91bGQgeW91IGJ1eSBmaXJzdD8iLCAidGhpbmtpbmciKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlbmRlclN1cHBsaWVzKCkgewogICAgICAgICAgICBjb25zdCBzdXBwbHlNZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N1cHBseS1tZW51Jyk7CiAgICAgICAgICAgIHN1cHBseU1lbnUuaW5uZXJIVE1MID0gc3VwcGxpZXMubWFwKHN1cHBseSA9PiBgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZW51LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0taW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpdGVtLWVtb2ppIj4ke3N1cHBseS5lbW9qaX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PiR7c3VwcGx5Lm5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdXBwbHkubmFtZS5zbGljZSgxKX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+JCR7c3VwcGx5LmNvc3R9IGZvciAke3N1cHBseS5hbW91bnR9PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1eS1idG4iIG9uY2xpY2s9ImJ1eVN1cHBseSgnJHtzdXBwbHkubmFtZX0nKSIgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2dhbWVTdGF0ZS5tb25leSA8IHN1cHBseS5jb3N0ID8gJ2Rpc2FibGVkJyA6ICcnfT4KICAgICAgICAgICAgICAgICAgICAgICAgQnV5CiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgYCkuam9pbignJyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBidXlTdXBwbHkoc3VwcGx5TmFtZSkgewogICAgICAgICAgICBjb25zdCBzdXBwbHkgPSBzdXBwbGllcy5maW5kKHMgPT4gcy5uYW1lID09PSBzdXBwbHlOYW1lKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChnYW1lU3RhdGUubW9uZXkgPj0gc3VwcGx5LmNvc3QpIHsKICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5tb25leSAtPSBzdXBwbHkuY29zdDsKICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5kYWlseUV4cGVuc2VzICs9IHN1cHBseS5jb3N0OwogICAgICAgICAgICAgICAgZ2FtZVN0YXRlLmludmVudG9yeVtzdXBwbHlOYW1lXSArPSBzdXBwbHkuYW1vdW50OwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB1cGRhdGVEaXNwbGF5KCk7CiAgICAgICAgICAgICAgICByZW5kZXJTdXBwbGllcygpOwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLmRhaWx5RXhwZW5zZXMgPiBnYW1lU3RhdGUubW9uZXkgKyBnYW1lU3RhdGUuZGFpbHlTYWxlcykgewogICAgICAgICAgICAgICAgICAgIHNob3dDb25mdXNpb24oIlVoIG9oISBZb3UncmUgc3BlbmRpbmcgbW9yZSB0aGFuIHlvdSBoYXZlISBUaGlzIGlzIHdoYXQgaGFwcGVucyB3aGVuIGV4cGVuc2VzIGV4Y2VlZCBpbmNvbWUuIiwgIndhcm5pbmciKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc2hvd1N0YXR1cyhgQm91Z2h0ICR7c3VwcGx5LmFtb3VudH0gJHtzdXBwbHlOYW1lfSEgTW9uZXkgbGVmdDogJCR7Z2FtZVN0YXRlLm1vbmV5fWAsICJzdWNjZXNzIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZURpc3BsYXkoKSB7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXJyZW50LWRheScpLnRleHRDb250ZW50ID0gZ2FtZVN0YXRlLmRheTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RhaWx5LWdvYWwnKS50ZXh0Q29udGVudCA9IGdhbWVTdGF0ZS5kYWlseUdvYWw7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXJyZW50LW1vbmV5JykudGV4dENvbnRlbnQgPSBnYW1lU3RhdGUubW9uZXk7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYWlseS1zYWxlcycpLnRleHRDb250ZW50ID0gZ2FtZVN0YXRlLmRhaWx5U2FsZXM7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYWlseS1leHBlbnNlcycpLnRleHRDb250ZW50ID0gZ2FtZVN0YXRlLmRhaWx5RXhwZW5zZXM7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkYWlseS1wcm9maXQnKS50ZXh0Q29udGVudCA9IGdhbWVTdGF0ZS5kYWlseVNhbGVzIC0gZ2FtZVN0YXRlLmRhaWx5RXhwZW5zZXM7CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBVcGRhdGUgaW52ZW50b3J5IGRpc3BsYXkKICAgICAgICAgICAgY29uc3QgaW52ZW50b3J5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ludmVudG9yeScpOwogICAgICAgICAgICBpbnZlbnRvcnkuaW5uZXJIVE1MID0gT2JqZWN0LmVudHJpZXMoZ2FtZVN0YXRlLmludmVudG9yeSkubWFwKChbaXRlbSwgYW1vdW50XSkgPT4gewogICAgICAgICAgICAgICAgY29uc3Qgc3VwcGx5ID0gc3VwcGxpZXMuZmluZChzID0+IHMubmFtZSA9PT0gaXRlbSk7CiAgICAgICAgICAgICAgICByZXR1cm4gYAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1ZGdldC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JHtzdXBwbHkuZW1vaml9ICR7aXRlbX06PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4ke2Ftb3VudH08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICBgOwogICAgICAgICAgICB9KS5qb2luKCcnKTsKCiAgICAgICAgICAgIC8vIFVwZGF0ZSBwcm9ncmVzcyBiYXIKICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1pbigoZ2FtZVN0YXRlLmRhaWx5U2FsZXMgLyBnYW1lU3RhdGUuZGFpbHlHb2FsKSAqIDEwMCwgMTAwKTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dvYWwtcHJvZ3Jlc3MnKS5zdHlsZS53aWR0aCA9IHByb2dyZXNzICsgJyUnOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gb3BlblNob3AoKSB7CiAgICAgICAgICAgIGlmIChPYmplY3QudmFsdWVzKGdhbWVTdGF0ZS5pbnZlbnRvcnkpLmV2ZXJ5KGFtb3VudCA9PiBhbW91bnQgPT09IDApKSB7CiAgICAgICAgICAgICAgICBzaG93Q29uZnVzaW9uKCJZb3UgY2FuJ3Qgb3BlbiB3aXRob3V0IHN1cHBsaWVzISBDdXN0b21lcnMgbmVlZCBjb2ZmZWUsIGN1cHMsIGFuZCBvdGhlciBpbmdyZWRpZW50cy4iLCAidGhpbmtpbmciKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZ2FtZVN0YXRlLmlzT3BlbiA9IHRydWU7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcGVuLWJ0bicpLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nsb3NlLWJ0bicpLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgIAogICAgICAgICAgICBzaG93U3RhdHVzKCJTaG9wIGlzIG9wZW4hIEN1c3RvbWVycyBhcmUgY29taW5nISIsICJzdWNjZXNzIik7CiAgICAgICAgICAgIHN0YXJ0Q3VzdG9tZXJGbG93KCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjbG9zZVNob3AoKSB7CiAgICAgICAgICAgIGdhbWVTdGF0ZS5pc09wZW4gPSBmYWxzZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29wZW4tYnRuJykuZGlzYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nsb3NlLWJ0bicpLmRpc2FibGVkID0gdHJ1ZTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChnYW1lU3RhdGUuY3VzdG9tZXJUaW1lcikgewogICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChnYW1lU3RhdGUuY3VzdG9tZXJUaW1lcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGdhbWVTdGF0ZS5jdXN0b21lcnMgPSBbXTsKICAgICAgICAgICAgdXBkYXRlQ3VzdG9tZXJEaXNwbGF5KCk7CiAgICAgICAgICAgIHNob3dTdGF0dXMoIlNob3AgY2xvc2VkIGZvciB0aGUgZGF5ISIsICIiKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHN0YXJ0Q3VzdG9tZXJGbG93KCkgewogICAgICAgICAgICBnYW1lU3RhdGUuY3VzdG9tZXJUaW1lciA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgICAgICAgIGlmIChnYW1lU3RhdGUuaXNPcGVuICYmIE1hdGgucmFuZG9tKCkgPCAwLjYpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXN0b21lciA9IHsuLi5jdXN0b21lclR5cGVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1c3RvbWVyVHlwZXMubGVuZ3RoKV19OwogICAgICAgICAgICAgICAgICAgIGN1c3RvbWVyLmlkID0gRGF0ZS5ub3coKTsKICAgICAgICAgICAgICAgICAgICBnYW1lU3RhdGUuY3VzdG9tZXJzLnB1c2goY3VzdG9tZXIpOwogICAgICAgICAgICAgICAgICAgIHVwZGF0ZUN1c3RvbWVyRGlzcGxheSgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCAzMDAwKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUN1c3RvbWVyRGlzcGxheSgpIHsKICAgICAgICAgICAgY29uc3QgY3VzdG9tZXJzRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1c3RvbWVycycpOwogICAgICAgICAgICBpZiAoZ2FtZVN0YXRlLmN1c3RvbWVycy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgIGN1c3RvbWVyc0Rpdi5pbm5lckhUTUwgPSBnYW1lU3RhdGUuaXNPcGVuID8gJzxwPldhaXRpbmcgZm9yIGN1c3RvbWVycy4uLjwvcD4nIDogJzxwPlNob3AgaXMgY2xvc2VkPC9wPic7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGN1c3RvbWVyc0Rpdi5pbm5lckhUTUwgPSBnYW1lU3RhdGUuY3VzdG9tZXJzLm1hcChjdXN0b21lciA9PiBgCiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjdXN0b21lciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz4ke2N1c3RvbWVyLm5hbWV9PC9zdHJvbmc+IC0gUGF5cyAkJHtjdXN0b21lci5wYXl9CiAgICAgICAgICAgICAgICAgICAgICAgIDxicj5OZWVkczogJHtPYmplY3QuZW50cmllcyhjdXN0b21lci5uZWVkcykubWFwKChbaXRlbSwgYW1vdW50XSkgPT4gCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHthbW91bnR9ICR7aXRlbX1gKS5qb2luKCcsICcpfQogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InNlcnZlLWJ0biIgb25jbGljaz0ic2VydmVDdXN0b21lcigke2N1c3RvbWVyLmlkfSkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAke2NhblNlcnZlQ3VzdG9tZXIoY3VzdG9tZXIpID8gJycgOiAnZGlzYWJsZWQnfT4KICAgICAgICAgICAgICAgICAgICAgICAgJHtjYW5TZXJ2ZUN1c3RvbWVyKGN1c3RvbWVyKSA/ICdTZXJ2ZScgOiAnTWlzc2luZyBJdGVtcyd9CiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgYCkuam9pbignJyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjYW5TZXJ2ZUN1c3RvbWVyKGN1c3RvbWVyKSB7CiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZW50cmllcyhjdXN0b21lci5uZWVkcykuZXZlcnkoKFtpdGVtLCBuZWVkZWRdKSA9PiAKICAgICAgICAgICAgICAgIGdhbWVTdGF0ZS5pbnZlbnRvcnlbaXRlbV0gPj0gbmVlZGVkCiAgICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzZXJ2ZUN1c3RvbWVyKGN1c3RvbWVySWQpIHsKICAgICAgICAgICAgY29uc3QgY3VzdG9tZXJJbmRleCA9IGdhbWVTdGF0ZS5jdXN0b21lcnMuZmluZEluZGV4KGMgPT4gYy5pZCA9PT0gY3VzdG9tZXJJZCk7CiAgICAgICAgICAgIGNvbnN0IGN1c3RvbWVyID0gZ2FtZVN0YXRlLmN1c3RvbWVyc1tjdXN0b21lckluZGV4XTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICghY2FuU2VydmVDdXN0b21lcihjdXN0b21lcikpIHsKICAgICAgICAgICAgICAgIHNob3dDb25mdXNpb24oIllvdSBkb24ndCBoYXZlIGVub3VnaCBzdXBwbGllcyEgVGhpcyBpcyB3aHkgcGxhbm5pbmcgeW91ciBpbnZlbnRvcnkgaXMgaW1wb3J0YW50LiIsICJ0aGlua2luZyIpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBEZWR1Y3QgaW52ZW50b3J5CiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGN1c3RvbWVyLm5lZWRzKS5mb3JFYWNoKChbaXRlbSwgbmVlZGVkXSkgPT4gewogICAgICAgICAgICAgICAgZ2FtZVN0YXRlLmludmVudG9yeVtpdGVtXSAtPSBuZWVkZWQ7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8gQWRkIG1vbmV5CiAgICAgICAgICAgIGdhbWVTdGF0ZS5tb25leSArPSBjdXN0b21lci5wYXk7CiAgICAgICAgICAgIGdhbWVTdGF0ZS5kYWlseVNhbGVzICs9IGN1c3RvbWVyLnBheTsKCiAgICAgICAgICAgIC8vIFJlbW92ZSBjdXN0b21lcgogICAgICAgICAgICBnYW1lU3RhdGUuY3VzdG9tZXJzLnNwbGljZShjdXN0b21lckluZGV4LCAxKTsKCiAgICAgICAgICAgIHVwZGF0ZURpc3BsYXkoKTsKICAgICAgICAgICAgdXBkYXRlQ3VzdG9tZXJEaXNwbGF5KCk7CiAgICAgICAgICAgIHNob3dTdGF0dXMoYFNlcnZlZCBjdXN0b21lciEgRWFybmVkICQke2N1c3RvbWVyLnBheX1gLCAic3VjY2VzcyIpOwoKICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcnVubmluZyBsb3cgb24gc3VwcGxpZXMKICAgICAgICAgICAgY29uc3QgbG93U3VwcGxpZXMgPSBPYmplY3QuZW50cmllcyhnYW1lU3RhdGUuaW52ZW50b3J5KS5maWx0ZXIoKFtpdGVtLCBhbW91bnRdKSA9PiBhbW91bnQgPD0gMik7CiAgICAgICAgICAgIGlmIChsb3dTdXBwbGllcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICBzaG93Q29uZnVzaW9uKGBSdW5uaW5nIGxvdyBvbiAke2xvd1N1cHBsaWVzLm1hcCgoW2l0ZW1dKSA9PiBpdGVtKS5qb2luKCcsICcpfSEgV2hhdCBoYXBwZW5zIHdoZW4geW91IHJ1biBvdXQ/YCwgIndhcm5pbmciKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gbmV4dERheSgpIHsKICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5pc09wZW4pIHsKICAgICAgICAgICAgICAgIGNsb3NlU2hvcCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb25zdCBwcm9maXQgPSBnYW1lU3RhdGUuZGFpbHlTYWxlcyAtIGdhbWVTdGF0ZS5kYWlseUV4cGVuc2VzOwogICAgICAgICAgICBsZXQgbWVzc2FnZSA9IGBEYXkgJHtnYW1lU3RhdGUuZGF5fSBDb21wbGV0ZSEKYDsKICAgICAgICAgICAgbWVzc2FnZSArPSBgU2FsZXM6ICQke2dhbWVTdGF0ZS5kYWlseVNhbGVzfQpgOwogICAgICAgICAgICBtZXNzYWdlICs9IGBFeHBlbnNlczogJCR7Z2FtZVN0YXRlLmRhaWx5RXhwZW5zZXN9CmA7CiAgICAgICAgICAgIG1lc3NhZ2UgKz0gYFByb2ZpdDogJCR7cHJvZml0fQpgOwoKICAgICAgICAgICAgaWYgKGdhbWVTdGF0ZS5kYWlseVNhbGVzID49IGdhbWVTdGF0ZS5kYWlseUdvYWwpIHsKICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gIvCfjokgR29hbCBhY2hpZXZlZCEiOwogICAgICAgICAgICAgICAgc2hvd1N0YXR1cyhtZXNzYWdlLCAic3VjY2VzcyIpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbWVzc2FnZSArPSBg8J+YhSBNaXNzZWQgZ29hbCBieSAkJHtnYW1lU3RhdGUuZGFpbHlHb2FsIC0gZ2FtZVN0YXRlLmRhaWx5U2FsZXN9YDsKICAgICAgICAgICAgICAgIHNob3dTdGF0dXMobWVzc2FnZSwgIndhcm5pbmciKTsKICAgICAgICAgICAgICAgIHNob3dDb25mdXNpb24oIkRpZG4ndCByZWFjaCB5b3VyIGdvYWw/IFRoaW5rIGFib3V0IHdoYXQgeW91IGNvdWxkIGRvIGRpZmZlcmVudGx5IHRvbW9ycm93ISIsICJ0aGlua2luZyIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBSZXNldCBmb3IgbmV4dCBkYXkKICAgICAgICAgICAgZ2FtZVN0YXRlLmRheSsrOwogICAgICAgICAgICBnYW1lU3RhdGUuZGFpbHlHb2FsICs9IDIwOyAvLyBJbmNyZWFzZSBkaWZmaWN1bHR5CiAgICAgICAgICAgIGdhbWVTdGF0ZS5kYWlseVNhbGVzID0gMDsKICAgICAgICAgICAgZ2FtZVN0YXRlLmRhaWx5RXhwZW5zZXMgPSAwOwogICAgICAgICAgICBnYW1lU3RhdGUuY3VzdG9tZXJzID0gW107CgogICAgICAgICAgICB1cGRhdGVEaXNwbGF5KCk7CiAgICAgICAgICAgIHVwZGF0ZUN1c3RvbWVyRGlzcGxheSgpOwogICAgICAgICAgICByZW5kZXJTdXBwbGllcygpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVzZXRHYW1lKCkgewogICAgICAgICAgICBnYW1lU3RhdGUgPSB7CiAgICAgICAgICAgICAgICBtb25leTogMTAwLAogICAgICAgICAgICAgICAgZGF5OiAxLAogICAgICAgICAgICAgICAgZGFpbHlHb2FsOiA1MCwKICAgICAgICAgICAgICAgIGRhaWx5U2FsZXM6IDAsCiAgICAgICAgICAgICAgICBkYWlseUV4cGVuc2VzOiAwLAogICAgICAgICAgICAgICAgaXNPcGVuOiBmYWxzZSwKICAgICAgICAgICAgICAgIGludmVudG9yeTogeyBjb2ZmZWU6IDAsIG1pbGs6IDAsIHN1Z2FyOiAwLCBjdXBzOiAwIH0sCiAgICAgICAgICAgICAgICBjdXN0b21lcnM6IFtdLAogICAgICAgICAgICAgICAgY3VzdG9tZXJUaW1lcjogbnVsbCwKICAgICAgICAgICAgICAgIGNvbmZ1c2lvbk1vbWVudHM6IDAKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGlmIChnYW1lU3RhdGUuY3VzdG9tZXJUaW1lcikgewogICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChnYW1lU3RhdGUuY3VzdG9tZXJUaW1lcik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcGVuLWJ0bicpLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjbG9zZS1idG4nKS5kaXNhYmxlZCA9IHRydWU7CgogICAgICAgICAgICB1cGRhdGVEaXNwbGF5KCk7CiAgICAgICAgICAgIHVwZGF0ZUN1c3RvbWVyRGlzcGxheSgpOwogICAgICAgICAgICByZW5kZXJTdXBwbGllcygpOwogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29uZnVzaW9uLXpvbmUnKS5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgc2hvd1N0YXR1cygiTmV3IGdhbWUgc3RhcnRlZCEgUGxhbiB5b3VyIGJ1ZGdldCB3aXNlbHkhIiwgIiIpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2hvd1N0YXR1cyhtZXNzYWdlLCB0eXBlKSB7CiAgICAgICAgICAgIGNvbnN0IHN0YXR1c0VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXR1cy1tZXNzYWdlJyk7CiAgICAgICAgICAgIHN0YXR1c0VsLnRleHRDb250ZW50ID0gbWVzc2FnZTsKICAgICAgICAgICAgc3RhdHVzRWwuY2xhc3NOYW1lID0gYGdhbWUtc3RhdHVzICR7dHlwZX1gOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc2hvd0NvbmZ1c2lvbihtZXNzYWdlLCB0eXBlKSB7CiAgICAgICAgICAgIGdhbWVTdGF0ZS5jb25mdXNpb25Nb21lbnRzKys7CiAgICAgICAgICAgIGNvbnN0IGNvbmZ1c2lvblpvbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29uZnVzaW9uLXpvbmUnKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnN0IGNvbmZ1c2lvbkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgIGNvbmZ1c2lvbkVsLmNsYXNzTmFtZSA9ICdjb25mdXNpb24tY2VsZWJyYXRpb24nOwogICAgICAgICAgICBjb25mdXNpb25FbC5pbm5lckhUTUwgPSBgCiAgICAgICAgICAgICAgICA8aDM+8J+klCBCdWRnZXQgRGV0ZWN0aXZlIE1vbWVudCAjJHtnYW1lU3RhdGUuY29uZnVzaW9uTW9tZW50c308L2gzPgogICAgICAgICAgICAgICAgPHA+JHttZXNzYWdlfTwvcD4KICAgICAgICAgICAgICAgIDxzbWFsbD5HcmVhdCBqb2IgdGhpbmtpbmcgYWJvdXQgdGhlIGNvbXBsZXhpdGllcyBvZiBidWRnZXRpbmchPC9zbWFsbD4KICAgICAgICAgICAgYDsKICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbmZ1c2lvblpvbmUuYXBwZW5kQ2hpbGQoY29uZnVzaW9uRWwpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gUmVtb3ZlIGFmdGVyIDUgc2Vjb25kcwogICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICAgICAgICAgIGlmIChjb25mdXNpb25FbC5wYXJlbnROb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgY29uZnVzaW9uRWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjb25mdXNpb25FbCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIDUwMDApOwogICAgICAgIH0KCiAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgZ2FtZQogICAgICAgIGluaXRHYW1lKCk7CiAgICA8L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+"
    },
    "money-bucket-sort": {
        "id": "money-bucket-sort",
        "name": "Money Bucket Sort",
        "description": "Money Bucket Sort is an interactive financial literacy game that teaches children fundamental money management through engaging drag-and-drop mechanics. Players categorize everyday financial items like allowances, chores, video games, and candy into 'Money IN' (income sources) and 'Money OUT' (expenses) buckets across five progressive challenges. The game features immediate visual feedback, celebratory animations for correct answers, and age-appropriate explanations that reinforce learning. With intuitive controls optimized for both desktop and mobile devices, it provides a foundation for budget awareness and financial responsibility. Perfect for young learners to practice identifying income versus expense categories in a fun, risk-free environment that makes money management concepts accessible and enjoyable.",
        "code": ""
    }
}