{
    "coffee-shop-financial-literacy": {
        "id": "coffee-shop-financial-literacy",
        "name": "Coffee Shop Budget Master",
        "description": "Coffee Shop Budget Master is an educational simulation game with functional components including: Core game mechanics (starting with $100 cash, empty inventory, $50 daily goal; four supply types with different costs; four drink types with varying requirements; open/close shop operations with automatic customer generation; multi-day gameplay with increasing difficulty). Real-time tracking systems (budget dashboard showing cash, sales, expenses, profit; inventory management with purchase/consumption tracking; customer queue visualization; progress monitoring with goal achievement bar). Decision-making framework (strategic purchasing based on funds and demand; service decisions requiring inventory availability; timing decisions for operations and day progression). Educational components include: Financial literacy concepts (income vs expenses tracking; real-time profit calculation; cash flow management; resource allocation strategies). Budgeting skills development (progressive goal setting; demand-based planning; consequence learning through immediate feedback; risk assessment of purchasing and serving strategies). Interactive learning features (Budget Detective Moments that reframe mistakes as opportunities; real-time warnings for financial missteps; progress visualization; end-of-day reflection prompts). Practical application (supply chain understanding of inventory impact on revenue; customer service economics; basic business operations concepts; strategic thinking for different profit approaches).",
        "code": ""
    }
}